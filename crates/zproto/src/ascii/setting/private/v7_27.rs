//! Settings in firmware version 7.27.

// #############################################################################
//  WARNING:
//  This file is generated by scripts/generate-apis. Do not modify it manually.
// #############################################################################

use crate::ascii::setting::Setting;
use crate::ascii::chain::scope::{AxisScope, DeviceScope};

define_settings! {

    /// The type representing the [`accel`](https://www.zaber.com/protocol-manual#topic_setting_accel) setting.
    pub struct Accel: Setting<Type = u32, Name = "accel">, AxisScope;
    /// The type representing the [`calibration.type`](https://www.zaber.com/protocol-manual#topic_setting_calibration_type) setting.
    pub struct CalibrationType: Setting<Type = u8, Name = "calibration.type">, AxisScope;
    /// The type representing the [`cloop.continuous.enable`](https://www.zaber.com/protocol-manual#topic_setting_cloop_continuous_enable) setting.
    pub struct CloopContinuousEnable: Setting<Type = bool, Name = "cloop.continuous.enable">, AxisScope;
    /// The type representing the [`cloop.displace.tolerance`](https://www.zaber.com/protocol-manual#topic_setting_cloop_displace_tolerance) setting.
    pub struct CloopDisplaceTolerance: Setting<Type = u32, Name = "cloop.displace.tolerance">, AxisScope;
    /// The type representing the [`cloop.enable`](https://www.zaber.com/protocol-manual#topic_setting_cloop_enable) setting.
    pub struct CloopEnable: Setting<Type = bool, Name = "cloop.enable">, AxisScope;
    /// The type representing the [`cloop.recovery.enable`](https://www.zaber.com/protocol-manual#topic_setting_cloop_recovery_enable) setting.
    pub struct CloopRecoveryEnable: Setting<Type = bool, Name = "cloop.recovery.enable">, AxisScope;
    /// The type representing the [`cloop.servo.enable`](https://www.zaber.com/protocol-manual#topic_setting_cloop_servo_enable) setting.
    pub struct CloopServoEnable: Setting<Type = bool, Name = "cloop.servo.enable">, AxisScope;
    /// The type representing the [`cloop.settle.period`](https://www.zaber.com/protocol-manual#topic_setting_cloop_settle_period) setting.
    pub struct CloopSettlePeriod: Setting<Type = u32, Name = "cloop.settle.period">, AxisScope;
    /// The type representing the [`cloop.settle.tolerance`](https://www.zaber.com/protocol-manual#topic_setting_cloop_settle_tolerance) setting.
    pub struct CloopSettleTolerance: Setting<Type = u32, Name = "cloop.settle.tolerance">, AxisScope;
    /// The type representing the [`cloop.stall.action`](https://www.zaber.com/protocol-manual#topic_setting_cloop_stall_action) setting.
    pub struct CloopStallAction: Setting<Type = u8, Name = "cloop.stall.action">, AxisScope;
    /// The type representing the [`cloop.stall.detect.mode`](https://www.zaber.com/protocol-manual#topic_setting_cloop_stall_detect_mode) setting.
    pub struct CloopStallDetectMode: Setting<Type = u8, Name = "cloop.stall.detect.mode">, AxisScope;
    /// The type representing the [`cloop.stall.tolerance`](https://www.zaber.com/protocol-manual#topic_setting_cloop_stall_tolerance) setting.
    pub struct CloopStallTolerance: Setting<Type = u32, Name = "cloop.stall.tolerance">, AxisScope;
    /// The type representing the [`cloop.timeout`](https://www.zaber.com/protocol-manual#topic_setting_cloop_timeout) setting.
    pub struct CloopTimeout: Setting<Type = u16, Name = "cloop.timeout">, AxisScope;
    /// The type representing the [`comm.address`](https://www.zaber.com/protocol-manual#topic_setting_comm_address) setting.
    pub struct CommAddress: Setting<Type = u8, Name = "comm.address">, DeviceScope;
    /// The type representing the [`comm.alert`](https://www.zaber.com/protocol-manual#topic_setting_comm_alert) setting.
    pub struct CommAlert: Setting<Type = bool, Name = "comm.alert">, DeviceScope;
    /// The type representing the [`comm.checksum`](https://www.zaber.com/protocol-manual#topic_setting_comm_checksum) setting.
    pub struct CommChecksum: Setting<Type = u8, Name = "comm.checksum">, DeviceScope;
    /// The type representing the [`comm.command.packets.max`](https://www.zaber.com/protocol-manual#topic_setting_comm_command_packets_max) setting.
    pub struct CommCommandPacketsMax: Setting<Type = u8, Name = "comm.command.packets.max">, DeviceScope;
    /// The type representing the [`comm.en.ipv4.address`](https://www.zaber.com/protocol-manual#topic_setting_comm_en_ipv4_address) setting.
    pub struct CommEnIpv4Address: Setting<Type = ::std::net::Ipv4Addr, Name = "comm.en.ipv4.address">, DeviceScope;
    /// The type representing the [`comm.en.ipv4.dhcp.enabled`](https://www.zaber.com/protocol-manual#topic_setting_comm_en_ipv4_dhcp_enabled) setting.
    pub struct CommEnIpv4DhcpEnabled: Setting<Type = bool, Name = "comm.en.ipv4.dhcp.enabled">, DeviceScope;
    /// The type representing the [`comm.en.ipv4.gateway`](https://www.zaber.com/protocol-manual#topic_setting_comm_en_ipv4_gateway) setting.
    pub struct CommEnIpv4Gateway: Setting<Type = ::std::net::Ipv4Addr, Name = "comm.en.ipv4.gateway">, DeviceScope;
    /// The type representing the [`comm.en.ipv4.netmask`](https://www.zaber.com/protocol-manual#topic_setting_comm_en_ipv4_netmask) setting.
    pub struct CommEnIpv4Netmask: Setting<Type = ::std::net::Ipv4Addr, Name = "comm.en.ipv4.netmask">, DeviceScope;
    /// The type representing the [`comm.en.mac`](https://www.zaber.com/protocol-manual#topic_setting_comm_en_mac) setting.
    pub struct CommEnMac: Setting<Type = crate::ascii::setting::data_types::MacAddress, Name = "comm.en.mac">, DeviceScope;
    /// The type representing the [`comm.en.mdns.enable`](https://www.zaber.com/protocol-manual#topic_setting_comm_en_mdns_enable) setting.
    pub struct CommEnMdnsEnable: Setting<Type = bool, Name = "comm.en.mdns.enable">, DeviceScope;
    /// The type representing the [`comm.next.owner`](https://www.zaber.com/protocol-manual#topic_setting_comm_next_owner) setting.
    pub struct CommNextOwner: Setting<Type = u8, Name = "comm.next.owner">, DeviceScope;
    /// The type representing the [`comm.packet.size.max`](https://www.zaber.com/protocol-manual#topic_setting_comm_packet_size_max) setting.
    pub struct CommPacketSizeMax: Setting<Type = u16, Name = "comm.packet.size.max">, DeviceScope;
    /// The type representing the [`comm.protocol`](https://www.zaber.com/protocol-manual#topic_setting_comm_protocol) setting.
    pub struct CommProtocol: Setting<Type = u8, Name = "comm.protocol">, DeviceScope;
    /// The type representing the [`comm.rs232.baud`](https://www.zaber.com/protocol-manual#topic_setting_comm_rs232_baud) setting.
    pub struct CommRs232Baud: Setting<Type = u32, Name = "comm.rs232.baud">, DeviceScope;
    /// The type representing the [`comm.word.size.max`](https://www.zaber.com/protocol-manual#topic_setting_comm_word_size_max) setting.
    pub struct CommWordSizeMax: Setting<Type = u16, Name = "comm.word.size.max">, DeviceScope;
    /// The type representing the [`device.hw.modified`](https://www.zaber.com/protocol-manual#topic_setting_device_hw_modified) setting.
    pub struct DeviceHwModified: Setting<Type = bool, Name = "device.hw.modified">, DeviceScope;
    /// The type representing the [`device.id`](https://www.zaber.com/protocol-manual#topic_setting_device_id) setting.
    pub struct DeviceId: Setting<Type = u32, Name = "device.id">, DeviceScope;
    /// The type representing the [`driver.current.hold`](https://www.zaber.com/protocol-manual#topic_setting_driver_current_hold) setting.
    pub struct DriverCurrentHold: Setting<Type = u32, Name = "driver.current.hold">, AxisScope;
    /// The type representing the [`driver.current.max`](https://www.zaber.com/protocol-manual#topic_setting_driver_current_max) setting.
    pub struct DriverCurrentMax: Setting<Type = u32, Name = "driver.current.max">, AxisScope;
    /// The type representing the [`driver.current.run`](https://www.zaber.com/protocol-manual#topic_setting_driver_current_run) setting.
    pub struct DriverCurrentRun: Setting<Type = u32, Name = "driver.current.run">, AxisScope;
    /// The type representing the [`driver.current.servo`](https://www.zaber.com/protocol-manual#topic_setting_driver_current_servo) setting.
    pub struct DriverCurrentServo: Setting<Type = u32, Name = "driver.current.servo">, AxisScope;
    /// The type representing the [`driver.dir`](https://www.zaber.com/protocol-manual#topic_setting_driver_dir) setting.
    pub struct DriverDir: Setting<Type = bool, Name = "driver.dir">, AxisScope;
    /// The type representing the [`driver.enabled`](https://www.zaber.com/protocol-manual#topic_setting_driver_enabled) setting.
    pub struct DriverEnabled: Setting<Type = bool, Name = "driver.enabled">, AxisScope;
    /// The type representing the [`driver.temperature`](https://www.zaber.com/protocol-manual#topic_setting_driver_temperature) setting.
    pub struct DriverTemperature: Setting<Type = f32, Name = "driver.temperature">, AxisScope;
    /// The type representing the [`encoder.1.count`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_count) setting.
    pub struct Encoder1Count: Setting<Type = i64, Name = "encoder.1.count">, AxisScope;
    /// The type representing the [`encoder.1.count.cal`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_count_cal) setting.
    pub struct Encoder1CountCal: Setting<Type = i64, Name = "encoder.1.count.cal">, AxisScope;
    /// The type representing the [`encoder.1.dir`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_dir) setting.
    pub struct Encoder1Dir: Setting<Type = bool, Name = "encoder.1.dir">, AxisScope;
    /// The type representing the [`encoder.1.fault.type`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_fault_type) setting.
    pub struct Encoder1FaultType: Setting<Type = u8, Name = "encoder.1.fault.type">, AxisScope;
    /// The type representing the [`encoder.1.filter`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_filter) setting.
    pub struct Encoder1Filter: Setting<Type = u16, Name = "encoder.1.filter">, AxisScope;
    /// The type representing the [`encoder.1.index.mode`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_index_mode) setting.
    pub struct Encoder1IndexMode: Setting<Type = bool, Name = "encoder.1.index.mode">, AxisScope;
    /// The type representing the [`encoder.1.mode`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_mode) setting.
    pub struct Encoder1Mode: Setting<Type = u8, Name = "encoder.1.mode">, AxisScope;
    /// The type representing the [`encoder.1.pos`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_pos) setting.
    pub struct Encoder1Pos: Setting<Type = i32, Name = "encoder.1.pos">, AxisScope;
    /// The type representing the [`encoder.1.pos.error`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_pos_error) setting.
    pub struct Encoder1PosError: Setting<Type = i32, Name = "encoder.1.pos.error">, AxisScope;
    /// The type representing the [`encoder.1.ratio.div`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_ratio_div) setting.
    pub struct Encoder1RatioDiv: Setting<Type = u16, Name = "encoder.1.ratio.div">, AxisScope;
    /// The type representing the [`encoder.1.ratio.mult`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_ratio_mult) setting.
    pub struct Encoder1RatioMult: Setting<Type = u8, Name = "encoder.1.ratio.mult">, AxisScope;
    /// The type representing the [`encoder.1.ref.phase`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_ref_phase) setting.
    pub struct Encoder1RefPhase: Setting<Type = u16, Name = "encoder.1.ref.phase">, AxisScope;
    /// The type representing the [`encoder.1.type`](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_type) setting.
    pub struct Encoder1Type: Setting<Type = u8, Name = "encoder.1.type">, AxisScope;
    /// The type representing the [`encoder.2.cos`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_cos) setting.
    pub struct Encoder2Cos: Setting<Type = i32, Name = "encoder.2.cos">, AxisScope;
    /// The type representing the [`encoder.2.cos.dc`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_cos_dc) setting.
    pub struct Encoder2CosDc: Setting<Type = i32, Name = "encoder.2.cos.dc">, AxisScope;
    /// The type representing the [`encoder.2.cos.dc.tune`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_cos_dc_tune) setting.
    pub struct Encoder2CosDcTune: Setting<Type = i32, Name = "encoder.2.cos.dc.tune">, AxisScope;
    /// The type representing the [`encoder.2.cos.gain`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_cos_gain) setting.
    pub struct Encoder2CosGain: Setting<Type = u32, Name = "encoder.2.cos.gain">, AxisScope;
    /// The type representing the [`encoder.2.cos.gain.tune`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_cos_gain_tune) setting.
    pub struct Encoder2CosGainTune: Setting<Type = u32, Name = "encoder.2.cos.gain.tune">, AxisScope;
    /// The type representing the [`encoder.2.count`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_count) setting.
    pub struct Encoder2Count: Setting<Type = i64, Name = "encoder.2.count">, AxisScope;
    /// The type representing the [`encoder.2.count.cal`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_count_cal) setting.
    pub struct Encoder2CountCal: Setting<Type = i64, Name = "encoder.2.count.cal">, AxisScope;
    /// The type representing the [`encoder.2.dir`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_dir) setting.
    pub struct Encoder2Dir: Setting<Type = bool, Name = "encoder.2.dir">, AxisScope;
    /// The type representing the [`encoder.2.fault.type`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_fault_type) setting.
    pub struct Encoder2FaultType: Setting<Type = u8, Name = "encoder.2.fault.type">, AxisScope;
    /// The type representing the [`encoder.2.filter`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_filter) setting.
    pub struct Encoder2Filter: Setting<Type = u16, Name = "encoder.2.filter">, AxisScope;
    /// The type representing the [`encoder.2.index.mode`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_index_mode) setting.
    pub struct Encoder2IndexMode: Setting<Type = bool, Name = "encoder.2.index.mode">, AxisScope;
    /// The type representing the [`encoder.2.interpolation`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_interpolation) setting.
    pub struct Encoder2Interpolation: Setting<Type = u16, Name = "encoder.2.interpolation">, AxisScope;
    /// The type representing the [`encoder.2.mode`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_mode) setting.
    pub struct Encoder2Mode: Setting<Type = u8, Name = "encoder.2.mode">, AxisScope;
    /// The type representing the [`encoder.2.out.enable`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_out_enable) setting.
    pub struct Encoder2OutEnable: Setting<Type = bool, Name = "encoder.2.out.enable">, AxisScope;
    /// The type representing the [`encoder.2.out.interpolation`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_out_interpolation) setting.
    pub struct Encoder2OutInterpolation: Setting<Type = u32, Name = "encoder.2.out.interpolation">, AxisScope;
    /// The type representing the [`encoder.2.out.width`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_out_width) setting.
    pub struct Encoder2OutWidth: Setting<Type = u32, Name = "encoder.2.out.width">, AxisScope;
    /// The type representing the [`encoder.2.pos`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_pos) setting.
    pub struct Encoder2Pos: Setting<Type = i32, Name = "encoder.2.pos">, AxisScope;
    /// The type representing the [`encoder.2.pos.error`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_pos_error) setting.
    pub struct Encoder2PosError: Setting<Type = i32, Name = "encoder.2.pos.error">, AxisScope;
    /// The type representing the [`encoder.2.ratio.div`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_ratio_div) setting.
    pub struct Encoder2RatioDiv: Setting<Type = u16, Name = "encoder.2.ratio.div">, AxisScope;
    /// The type representing the [`encoder.2.ratio.mult`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_ratio_mult) setting.
    pub struct Encoder2RatioMult: Setting<Type = u8, Name = "encoder.2.ratio.mult">, AxisScope;
    /// The type representing the [`encoder.2.signal.min`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_signal_min) setting.
    pub struct Encoder2SignalMin: Setting<Type = u32, Name = "encoder.2.signal.min">, AxisScope;
    /// The type representing the [`encoder.2.sin`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_sin) setting.
    pub struct Encoder2Sin: Setting<Type = i32, Name = "encoder.2.sin">, AxisScope;
    /// The type representing the [`encoder.2.sin.dc`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_sin_dc) setting.
    pub struct Encoder2SinDc: Setting<Type = i32, Name = "encoder.2.sin.dc">, AxisScope;
    /// The type representing the [`encoder.2.sin.dc.tune`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_sin_dc_tune) setting.
    pub struct Encoder2SinDcTune: Setting<Type = i32, Name = "encoder.2.sin.dc.tune">, AxisScope;
    /// The type representing the [`encoder.2.sin.gain`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_sin_gain) setting.
    pub struct Encoder2SinGain: Setting<Type = u32, Name = "encoder.2.sin.gain">, AxisScope;
    /// The type representing the [`encoder.2.sin.gain.tune`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_sin_gain_tune) setting.
    pub struct Encoder2SinGainTune: Setting<Type = u32, Name = "encoder.2.sin.gain.tune">, AxisScope;
    /// The type representing the [`encoder.2.type`](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_type) setting.
    pub struct Encoder2Type: Setting<Type = u8, Name = "encoder.2.type">, AxisScope;
    /// The type representing the [`encoder.count`](https://www.zaber.com/protocol-manual#topic_setting_encoder_count) setting.
    pub struct EncoderCount: Setting<Type = i64, Name = "encoder.count">, AxisScope;
    /// The type representing the [`encoder.count.cal`](https://www.zaber.com/protocol-manual#topic_setting_encoder_count_cal) setting.
    pub struct EncoderCountCal: Setting<Type = i64, Name = "encoder.count.cal">, AxisScope;
    /// The type representing the [`encoder.dir`](https://www.zaber.com/protocol-manual#topic_setting_encoder_dir) setting.
    pub struct EncoderDir: Setting<Type = bool, Name = "encoder.dir">, AxisScope;
    /// The type representing the [`encoder.port.default`](https://www.zaber.com/protocol-manual#topic_setting_encoder_port_default) setting.
    pub struct EncoderPortDefault: Setting<Type = u8, Name = "encoder.port.default">, AxisScope;
    /// The type representing the [`encoder.pos`](https://www.zaber.com/protocol-manual#topic_setting_encoder_pos) setting.
    pub struct EncoderPos: Setting<Type = i32, Name = "encoder.pos">, AxisScope;
    /// The type representing the [`encoder.pos.error`](https://www.zaber.com/protocol-manual#topic_setting_encoder_pos_error) setting.
    pub struct EncoderPosError: Setting<Type = i32, Name = "encoder.pos.error">, AxisScope;
    /// The type representing the [`encoder.ratio.div`](https://www.zaber.com/protocol-manual#topic_setting_encoder_ratio_div) setting.
    pub struct EncoderRatioDiv: Setting<Type = u16, Name = "encoder.ratio.div">, AxisScope;
    /// The type representing the [`encoder.ratio.mult`](https://www.zaber.com/protocol-manual#topic_setting_encoder_ratio_mult) setting.
    pub struct EncoderRatioMult: Setting<Type = u8, Name = "encoder.ratio.mult">, AxisScope;
    /// The type representing the [`filter.holderid`](https://www.zaber.com/protocol-manual#topic_setting_filter_holderid) setting.
    pub struct FilterHolderid: Setting<Type = u16, Name = "filter.holderid">, DeviceScope;
    /// The type representing the [`force.max`](https://www.zaber.com/protocol-manual#topic_setting_force_max) setting.
    pub struct ForceMax: Setting<Type = u32, Name = "force.max">, AxisScope;
    /// The type representing the [`ictrl.advance.a`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_advance_a) setting.
    pub struct IctrlAdvanceA: Setting<Type = f64, Name = "ictrl.advance.a">, AxisScope;
    /// The type representing the [`ictrl.advance.offset`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_advance_offset) setting.
    pub struct IctrlAdvanceOffset: Setting<Type = f64, Name = "ictrl.advance.offset">, AxisScope;
    /// The type representing the [`ictrl.afcff.inductance`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_inductance) setting.
    pub struct IctrlAfcffInductance: Setting<Type = f64, Name = "ictrl.afcff.inductance">, AxisScope;
    /// The type representing the [`ictrl.afcff.ke`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_ke) setting.
    pub struct IctrlAfcffKe: Setting<Type = f64, Name = "ictrl.afcff.ke">, AxisScope;
    /// The type representing the [`ictrl.afcff.ki`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_ki) setting.
    pub struct IctrlAfcffKi: Setting<Type = f64, Name = "ictrl.afcff.ki">, AxisScope;
    /// The type representing the [`ictrl.afcff.max`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_max) setting.
    pub struct IctrlAfcffMax: Setting<Type = f64, Name = "ictrl.afcff.max">, AxisScope;
    /// The type representing the [`ictrl.afcff.ss`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_ss) setting.
    pub struct IctrlAfcffSs: Setting<Type = f64, Name = "ictrl.afcff.ss">, AxisScope;
    /// The type representing the [`ictrl.afcff.ss.max`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_ss_max) setting.
    pub struct IctrlAfcffSsMax: Setting<Type = f64, Name = "ictrl.afcff.ss.max">, AxisScope;
    /// The type representing the [`ictrl.delay`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_delay) setting.
    pub struct IctrlDelay: Setting<Type = f32, Name = "ictrl.delay">, AxisScope;
    /// The type representing the [`ictrl.ff.kd`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_ff_kd) setting.
    pub struct IctrlFfKd: Setting<Type = f64, Name = "ictrl.ff.kd">, AxisScope;
    /// The type representing the [`ictrl.ff.kp`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_ff_kp) setting.
    pub struct IctrlFfKp: Setting<Type = f64, Name = "ictrl.ff.kp">, AxisScope;
    /// The type representing the [`ictrl.gain.coldmult`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_gain_coldmult) setting.
    pub struct IctrlGainColdmult: Setting<Type = f64, Name = "ictrl.gain.coldmult">, AxisScope;
    /// The type representing the [`ictrl.period`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_period) setting.
    pub struct IctrlPeriod: Setting<Type = f32, Name = "ictrl.period">, AxisScope;
    /// The type representing the [`ictrl.pi.ki`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_pi_ki) setting.
    pub struct IctrlPiKi: Setting<Type = f64, Name = "ictrl.pi.ki">, AxisScope;
    /// The type representing the [`ictrl.pi.kp`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_pi_kp) setting.
    pub struct IctrlPiKp: Setting<Type = f64, Name = "ictrl.pi.kp">, AxisScope;
    /// The type representing the [`ictrl.type`](https://www.zaber.com/protocol-manual#topic_setting_ictrl_type) setting.
    pub struct IctrlType: Setting<Type = u8, Name = "ictrl.type">, AxisScope;
    /// The type representing the [`io.di.port`](https://www.zaber.com/protocol-manual#topic_setting_io_di_port) setting.
    pub struct IoDiPort: Setting<Type = u32, Name = "io.di.port">, DeviceScope;
    /// The type representing the [`io.do.port`](https://www.zaber.com/protocol-manual#topic_setting_io_do_port) setting.
    pub struct IoDoPort: Setting<Type = u32, Name = "io.do.port">, DeviceScope;
    /// The type representing the [`knob.dir`](https://www.zaber.com/protocol-manual#topic_setting_knob_dir) setting.
    pub struct KnobDir: Setting<Type = bool, Name = "knob.dir">, AxisScope;
    /// The type representing the [`knob.distance`](https://www.zaber.com/protocol-manual#topic_setting_knob_distance) setting.
    pub struct KnobDistance: Setting<Type = u32, Name = "knob.distance">, AxisScope;
    /// The type representing the [`knob.enable`](https://www.zaber.com/protocol-manual#topic_setting_knob_enable) setting.
    pub struct KnobEnable: Setting<Type = bool, Name = "knob.enable">, AxisScope;
    /// The type representing the [`knob.force`](https://www.zaber.com/protocol-manual#topic_setting_knob_force) setting.
    pub struct KnobForce: Setting<Type = u32, Name = "knob.force">, AxisScope;
    /// The type representing the [`knob.forceprofile`](https://www.zaber.com/protocol-manual#topic_setting_knob_forceprofile) setting.
    pub struct KnobForceprofile: Setting<Type = u8, Name = "knob.forceprofile">, AxisScope;
    /// The type representing the [`knob.maxspeed`](https://www.zaber.com/protocol-manual#topic_setting_knob_maxspeed) setting.
    pub struct KnobMaxspeed: Setting<Type = u64, Name = "knob.maxspeed">, AxisScope;
    /// The type representing the [`knob.mode`](https://www.zaber.com/protocol-manual#topic_setting_knob_mode) setting.
    pub struct KnobMode: Setting<Type = u8, Name = "knob.mode">, AxisScope;
    /// The type representing the [`knob.speedprofile`](https://www.zaber.com/protocol-manual#topic_setting_knob_speedprofile) setting.
    pub struct KnobSpeedprofile: Setting<Type = u8, Name = "knob.speedprofile">, AxisScope;
    /// The type representing the [`lamp.current`](https://www.zaber.com/protocol-manual#topic_setting_lamp_current) setting.
    pub struct LampCurrent: Setting<Type = f32, Name = "lamp.current">, AxisScope;
    /// The type representing the [`lamp.current.max`](https://www.zaber.com/protocol-manual#topic_setting_lamp_current_max) setting.
    pub struct LampCurrentMax: Setting<Type = f32, Name = "lamp.current.max">, AxisScope;
    /// The type representing the [`lamp.flux`](https://www.zaber.com/protocol-manual#topic_setting_lamp_flux) setting.
    pub struct LampFlux: Setting<Type = f32, Name = "lamp.flux">, AxisScope;
    /// The type representing the [`lamp.flux.max`](https://www.zaber.com/protocol-manual#topic_setting_lamp_flux_max) setting.
    pub struct LampFluxMax: Setting<Type = f32, Name = "lamp.flux.max">, AxisScope;
    /// The type representing the [`lamp.status`](https://www.zaber.com/protocol-manual#topic_setting_lamp_status) setting.
    pub struct LampStatus: Setting<Type = u32, Name = "lamp.status">, AxisScope;
    /// The type representing the [`lamp.temperature`](https://www.zaber.com/protocol-manual#topic_setting_lamp_temperature) setting.
    pub struct LampTemperature: Setting<Type = f32, Name = "lamp.temperature">, AxisScope;
    /// The type representing the [`lamp.wavelength.fwhm`](https://www.zaber.com/protocol-manual#topic_setting_lamp_wavelength_fwhm) setting.
    pub struct LampWavelengthFwhm: Setting<Type = u32, Name = "lamp.wavelength.fwhm">, AxisScope;
    /// The type representing the [`lamp.wavelength.peak`](https://www.zaber.com/protocol-manual#topic_setting_lamp_wavelength_peak) setting.
    pub struct LampWavelengthPeak: Setting<Type = u32, Name = "lamp.wavelength.peak">, AxisScope;
    /// The type representing the [`limit.approach.maxspeed`](https://www.zaber.com/protocol-manual#topic_setting_limit_approach_maxspeed) setting.
    pub struct LimitApproachMaxspeed: Setting<Type = u64, Name = "limit.approach.maxspeed">, AxisScope;
    /// The type representing the [`limit.away.action`](https://www.zaber.com/protocol-manual#topic_setting_limit_away_action) setting.
    pub struct LimitAwayAction: Setting<Type = u8, Name = "limit.away.action">, AxisScope;
    /// The type representing the [`limit.away.edge`](https://www.zaber.com/protocol-manual#topic_setting_limit_away_edge) setting.
    pub struct LimitAwayEdge: Setting<Type = bool, Name = "limit.away.edge">, AxisScope;
    /// The type representing the [`limit.away.offset`](https://www.zaber.com/protocol-manual#topic_setting_limit_away_offset) setting.
    pub struct LimitAwayOffset: Setting<Type = i32, Name = "limit.away.offset">, AxisScope;
    /// The type representing the [`limit.away.posupdate`](https://www.zaber.com/protocol-manual#topic_setting_limit_away_posupdate) setting.
    pub struct LimitAwayPosupdate: Setting<Type = u8, Name = "limit.away.posupdate">, AxisScope;
    /// The type representing the [`limit.away.preset`](https://www.zaber.com/protocol-manual#topic_setting_limit_away_preset) setting.
    pub struct LimitAwayPreset: Setting<Type = i32, Name = "limit.away.preset">, AxisScope;
    /// The type representing the [`limit.away.source`](https://www.zaber.com/protocol-manual#topic_setting_limit_away_source) setting.
    pub struct LimitAwaySource: Setting<Type = u8, Name = "limit.away.source">, AxisScope;
    /// The type representing the [`limit.away.state`](https://www.zaber.com/protocol-manual#topic_setting_limit_away_state) setting.
    pub struct LimitAwayState: Setting<Type = bool, Name = "limit.away.state">, AxisScope;
    /// The type representing the [`limit.away.triggered`](https://www.zaber.com/protocol-manual#topic_setting_limit_away_triggered) setting.
    pub struct LimitAwayTriggered: Setting<Type = bool, Name = "limit.away.triggered">, AxisScope;
    /// The type representing the [`limit.away.tune`](https://www.zaber.com/protocol-manual#topic_setting_limit_away_tune) setting.
    pub struct LimitAwayTune: Setting<Type = i64, Name = "limit.away.tune">, AxisScope;
    /// The type representing the [`limit.away.type`](https://www.zaber.com/protocol-manual#topic_setting_limit_away_type) setting.
    pub struct LimitAwayType: Setting<Type = u8, Name = "limit.away.type">, AxisScope;
    /// The type representing the [`limit.away.width`](https://www.zaber.com/protocol-manual#topic_setting_limit_away_width) setting.
    pub struct LimitAwayWidth: Setting<Type = u32, Name = "limit.away.width">, AxisScope;
    /// The type representing the [`limit.c.action`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_action) setting.
    pub struct LimitCAction: Setting<Type = u8, Name = "limit.c.action">, AxisScope;
    /// The type representing the [`limit.c.edge`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_edge) setting.
    pub struct LimitCEdge: Setting<Type = bool, Name = "limit.c.edge">, AxisScope;
    /// The type representing the [`limit.c.offset`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_offset) setting.
    pub struct LimitCOffset: Setting<Type = i32, Name = "limit.c.offset">, AxisScope;
    /// The type representing the [`limit.c.pos`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_pos) setting.
    pub struct LimitCPos: Setting<Type = i32, Name = "limit.c.pos">, AxisScope;
    /// The type representing the [`limit.c.posupdate`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_posupdate) setting.
    pub struct LimitCPosupdate: Setting<Type = u8, Name = "limit.c.posupdate">, AxisScope;
    /// The type representing the [`limit.c.preset`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_preset) setting.
    pub struct LimitCPreset: Setting<Type = i32, Name = "limit.c.preset">, AxisScope;
    /// The type representing the [`limit.c.source`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_source) setting.
    pub struct LimitCSource: Setting<Type = u8, Name = "limit.c.source">, AxisScope;
    /// The type representing the [`limit.c.state`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_state) setting.
    pub struct LimitCState: Setting<Type = bool, Name = "limit.c.state">, AxisScope;
    /// The type representing the [`limit.c.triggered`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_triggered) setting.
    pub struct LimitCTriggered: Setting<Type = bool, Name = "limit.c.triggered">, AxisScope;
    /// The type representing the [`limit.c.tune`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_tune) setting.
    pub struct LimitCTune: Setting<Type = i64, Name = "limit.c.tune">, AxisScope;
    /// The type representing the [`limit.c.type`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_type) setting.
    pub struct LimitCType: Setting<Type = u8, Name = "limit.c.type">, AxisScope;
    /// The type representing the [`limit.c.width`](https://www.zaber.com/protocol-manual#topic_setting_limit_c_width) setting.
    pub struct LimitCWidth: Setting<Type = u32, Name = "limit.c.width">, AxisScope;
    /// The type representing the [`limit.cycle.dist`](https://www.zaber.com/protocol-manual#topic_setting_limit_cycle_dist) setting.
    pub struct LimitCycleDist: Setting<Type = u32, Name = "limit.cycle.dist">, AxisScope;
    /// The type representing the [`limit.detect.decelonly`](https://www.zaber.com/protocol-manual#topic_setting_limit_detect_decelonly) setting.
    pub struct LimitDetectDecelonly: Setting<Type = u32, Name = "limit.detect.decelonly">, AxisScope;
    /// The type representing the [`limit.detect.maxspeed`](https://www.zaber.com/protocol-manual#topic_setting_limit_detect_maxspeed) setting.
    pub struct LimitDetectMaxspeed: Setting<Type = u64, Name = "limit.detect.maxspeed">, AxisScope;
    /// The type representing the [`limit.home.action`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_action) setting.
    pub struct LimitHomeAction: Setting<Type = u8, Name = "limit.home.action">, AxisScope;
    /// The type representing the [`limit.home.bidirectional`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_bidirectional) setting.
    pub struct LimitHomeBidirectional: Setting<Type = bool, Name = "limit.home.bidirectional">, AxisScope;
    /// The type representing the [`limit.home.edge`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_edge) setting.
    pub struct LimitHomeEdge: Setting<Type = bool, Name = "limit.home.edge">, AxisScope;
    /// The type representing the [`limit.home.offset`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_offset) setting.
    pub struct LimitHomeOffset: Setting<Type = i32, Name = "limit.home.offset">, AxisScope;
    /// The type representing the [`limit.home.posupdate`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_posupdate) setting.
    pub struct LimitHomePosupdate: Setting<Type = u8, Name = "limit.home.posupdate">, AxisScope;
    /// The type representing the [`limit.home.preset`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_preset) setting.
    pub struct LimitHomePreset: Setting<Type = i32, Name = "limit.home.preset">, AxisScope;
    /// The type representing the [`limit.home.source`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_source) setting.
    pub struct LimitHomeSource: Setting<Type = u8, Name = "limit.home.source">, AxisScope;
    /// The type representing the [`limit.home.state`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_state) setting.
    pub struct LimitHomeState: Setting<Type = bool, Name = "limit.home.state">, AxisScope;
    /// The type representing the [`limit.home.triggered`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_triggered) setting.
    pub struct LimitHomeTriggered: Setting<Type = bool, Name = "limit.home.triggered">, AxisScope;
    /// The type representing the [`limit.home.tune`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_tune) setting.
    pub struct LimitHomeTune: Setting<Type = i64, Name = "limit.home.tune">, AxisScope;
    /// The type representing the [`limit.home.type`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_type) setting.
    pub struct LimitHomeType: Setting<Type = u8, Name = "limit.home.type">, AxisScope;
    /// The type representing the [`limit.home.width`](https://www.zaber.com/protocol-manual#topic_setting_limit_home_width) setting.
    pub struct LimitHomeWidth: Setting<Type = u32, Name = "limit.home.width">, AxisScope;
    /// The type representing the [`limit.max`](https://www.zaber.com/protocol-manual#topic_setting_limit_max) setting.
    pub struct LimitMax: Setting<Type = i32, Name = "limit.max">, AxisScope;
    /// The type representing the [`limit.min`](https://www.zaber.com/protocol-manual#topic_setting_limit_min) setting.
    pub struct LimitMin: Setting<Type = i32, Name = "limit.min">, AxisScope;
    /// The type representing the [`limit.range.mode`](https://www.zaber.com/protocol-manual#topic_setting_limit_range_mode) setting.
    pub struct LimitRangeMode: Setting<Type = u8, Name = "limit.range.mode">, AxisScope;
    /// The type representing the [`limit.ref.phase`](https://www.zaber.com/protocol-manual#topic_setting_limit_ref_phase) setting.
    pub struct LimitRefPhase: Setting<Type = u16, Name = "limit.ref.phase">, AxisScope;
    /// The type representing the [`limit.ref.phase.measured`](https://www.zaber.com/protocol-manual#topic_setting_limit_ref_phase_measured) setting.
    pub struct LimitRefPhaseMeasured: Setting<Type = u16, Name = "limit.ref.phase.measured">, AxisScope;
    /// The type representing the [`limit.start.pos`](https://www.zaber.com/protocol-manual#topic_setting_limit_start_pos) setting.
    pub struct LimitStartPos: Setting<Type = u8, Name = "limit.start.pos">, AxisScope;
    /// The type representing the [`lockstep.numgroups`](https://www.zaber.com/protocol-manual#topic_setting_lockstep_numgroups) setting.
    pub struct LockstepNumgroups: Setting<Type = u8, Name = "lockstep.numgroups">, DeviceScope;
    /// The type representing the [`maxspeed`](https://www.zaber.com/protocol-manual#topic_setting_maxspeed) setting.
    pub struct Maxspeed: Setting<Type = u64, Name = "maxspeed">, AxisScope;
    /// The type representing the [`motion.accel.ramptime`](https://www.zaber.com/protocol-manual#topic_setting_motion_accel_ramptime) setting.
    pub struct MotionAccelRamptime: Setting<Type = f32, Name = "motion.accel.ramptime">, AxisScope;
    /// The type representing the [`motion.accelonly`](https://www.zaber.com/protocol-manual#topic_setting_motion_accelonly) setting.
    pub struct MotionAccelonly: Setting<Type = u32, Name = "motion.accelonly">, AxisScope;
    /// The type representing the [`motion.busy`](https://www.zaber.com/protocol-manual#topic_setting_motion_busy) setting.
    pub struct MotionBusy: Setting<Type = bool, Name = "motion.busy">, AxisScope;
    /// The type representing the [`motion.decelonly`](https://www.zaber.com/protocol-manual#topic_setting_motion_decelonly) setting.
    pub struct MotionDecelonly: Setting<Type = u32, Name = "motion.decelonly">, AxisScope;
    /// The type representing the [`motion.index.dist`](https://www.zaber.com/protocol-manual#topic_setting_motion_index_dist) setting.
    pub struct MotionIndexDist: Setting<Type = u32, Name = "motion.index.dist">, AxisScope;
    /// The type representing the [`motion.index.num`](https://www.zaber.com/protocol-manual#topic_setting_motion_index_num) setting.
    pub struct MotionIndexNum: Setting<Type = u32, Name = "motion.index.num">, AxisScope;
    /// The type representing the [`motor.current.max`](https://www.zaber.com/protocol-manual#topic_setting_motor_current_max) setting.
    pub struct MotorCurrentMax: Setting<Type = u32, Name = "motor.current.max">, AxisScope;
    /// The type representing the [`motor.inductance`](https://www.zaber.com/protocol-manual#topic_setting_motor_inductance) setting.
    pub struct MotorInductance: Setting<Type = f64, Name = "motor.inductance">, AxisScope;
    /// The type representing the [`motor.ke`](https://www.zaber.com/protocol-manual#topic_setting_motor_ke) setting.
    pub struct MotorKe: Setting<Type = f64, Name = "motor.ke">, AxisScope;
    /// The type representing the [`motor.phase`](https://www.zaber.com/protocol-manual#topic_setting_motor_phase) setting.
    pub struct MotorPhase: Setting<Type = u16, Name = "motor.phase">, AxisScope;
    /// The type representing the [`motor.phase.ratio.div1`](https://www.zaber.com/protocol-manual#topic_setting_motor_phase_ratio_div1) setting.
    pub struct MotorPhaseRatioDiv1: Setting<Type = u16, Name = "motor.phase.ratio.div1">, AxisScope;
    /// The type representing the [`motor.phase.ratio.div2`](https://www.zaber.com/protocol-manual#topic_setting_motor_phase_ratio_div2) setting.
    pub struct MotorPhaseRatioDiv2: Setting<Type = u16, Name = "motor.phase.ratio.div2">, AxisScope;
    /// The type representing the [`motor.phase.ratio.mult`](https://www.zaber.com/protocol-manual#topic_setting_motor_phase_ratio_mult) setting.
    pub struct MotorPhaseRatioMult: Setting<Type = u8, Name = "motor.phase.ratio.mult">, AxisScope;
    /// The type representing the [`motor.resistance`](https://www.zaber.com/protocol-manual#topic_setting_motor_resistance) setting.
    pub struct MotorResistance: Setting<Type = f64, Name = "motor.resistance">, AxisScope;
    /// The type representing the [`parking.state`](https://www.zaber.com/protocol-manual#topic_setting_parking_state) setting.
    pub struct ParkingState: Setting<Type = bool, Name = "parking.state">, AxisScope;
    /// The type representing the [`peripheral.hw.modified`](https://www.zaber.com/protocol-manual#topic_setting_peripheral_hw_modified) setting.
    pub struct PeripheralHwModified: Setting<Type = bool, Name = "peripheral.hw.modified">, AxisScope;
    /// The type representing the [`peripheral.id`](https://www.zaber.com/protocol-manual#topic_setting_peripheral_id) setting.
    pub struct PeripheralId: Setting<Type = u32, Name = "peripheral.id">, AxisScope;
    /// The type representing the [`peripheral.id.pending`](https://www.zaber.com/protocol-manual#topic_setting_peripheral_id_pending) setting.
    pub struct PeripheralIdPending: Setting<Type = u32, Name = "peripheral.id.pending">, AxisScope;
    /// The type representing the [`peripheral.serial`](https://www.zaber.com/protocol-manual#topic_setting_peripheral_serial) setting.
    pub struct PeripheralSerial: Setting<Type = u32, Name = "peripheral.serial">, AxisScope;
    /// The type representing the [`peripheral.serial.pending`](https://www.zaber.com/protocol-manual#topic_setting_peripheral_serial_pending) setting.
    pub struct PeripheralSerialPending: Setting<Type = u32, Name = "peripheral.serial.pending">, AxisScope;
    /// The type representing the [`pos`](https://www.zaber.com/protocol-manual#topic_setting_pos) setting.
    pub struct Pos: Setting<Type = i32, Name = "pos">, AxisScope;
    /// The type representing the [`resolution`](https://www.zaber.com/protocol-manual#topic_setting_resolution) setting.
    pub struct Resolution: Setting<Type = u16, Name = "resolution">, AxisScope;
    /// The type representing the [`scope.delay`](https://www.zaber.com/protocol-manual#topic_setting_scope_delay) setting.
    pub struct ScopeDelay: Setting<Type = f32, Name = "scope.delay">, DeviceScope;
    /// The type representing the [`scope.timebase`](https://www.zaber.com/protocol-manual#topic_setting_scope_timebase) setting.
    pub struct ScopeTimebase: Setting<Type = f32, Name = "scope.timebase">, DeviceScope;
    /// The type representing the [`stream.numbufs`](https://www.zaber.com/protocol-manual#topic_setting_stream_numbufs) setting.
    pub struct StreamNumbufs: Setting<Type = u32, Name = "stream.numbufs">, DeviceScope;
    /// The type representing the [`stream.numstreams`](https://www.zaber.com/protocol-manual#topic_setting_stream_numstreams) setting.
    pub struct StreamNumstreams: Setting<Type = u32, Name = "stream.numstreams">, DeviceScope;
    /// The type representing the [`system.access`](https://www.zaber.com/protocol-manual#topic_setting_system_access) setting.
    pub struct SystemAccess: Setting<Type = u16, Name = "system.access">, DeviceScope;
    /// The type representing the [`system.axiscount`](https://www.zaber.com/protocol-manual#topic_setting_system_axiscount) setting.
    pub struct SystemAxiscount: Setting<Type = u32, Name = "system.axiscount">, DeviceScope;
    /// The type representing the [`system.led.enable`](https://www.zaber.com/protocol-manual#topic_setting_system_led_enable) setting.
    pub struct SystemLedEnable: Setting<Type = bool, Name = "system.led.enable">, DeviceScope;
    /// The type representing the [`system.serial`](https://www.zaber.com/protocol-manual#topic_setting_system_serial) setting.
    pub struct SystemSerial: Setting<Type = u32, Name = "system.serial">, DeviceScope;
    /// The type representing the [`system.temperature`](https://www.zaber.com/protocol-manual#topic_setting_system_temperature) setting.
    pub struct SystemTemperature: Setting<Type = f32, Name = "system.temperature">, DeviceScope;
    /// The type representing the [`system.voltage`](https://www.zaber.com/protocol-manual#topic_setting_system_voltage) setting.
    pub struct SystemVoltage: Setting<Type = f32, Name = "system.voltage">, DeviceScope;
    /// The type representing the [`trigger.numactions`](https://www.zaber.com/protocol-manual#topic_setting_trigger_numactions) setting.
    pub struct TriggerNumactions: Setting<Type = u32, Name = "trigger.numactions">, DeviceScope;
    /// The type representing the [`trigger.numtriggers`](https://www.zaber.com/protocol-manual#topic_setting_trigger_numtriggers) setting.
    pub struct TriggerNumtriggers: Setting<Type = u32, Name = "trigger.numtriggers">, DeviceScope;
    /// The type representing the [`user.data.0`](https://www.zaber.com/protocol-manual#topic_setting_user_data_0) setting.
    pub struct UserData0: Setting<Type = i64, Name = "user.data.0">, DeviceScope;
    /// The type representing the [`user.data.1`](https://www.zaber.com/protocol-manual#topic_setting_user_data_1) setting.
    pub struct UserData1: Setting<Type = i64, Name = "user.data.1">, DeviceScope;
    /// The type representing the [`user.data.10`](https://www.zaber.com/protocol-manual#topic_setting_user_data_10) setting.
    pub struct UserData10: Setting<Type = i64, Name = "user.data.10">, DeviceScope;
    /// The type representing the [`user.data.11`](https://www.zaber.com/protocol-manual#topic_setting_user_data_11) setting.
    pub struct UserData11: Setting<Type = i64, Name = "user.data.11">, DeviceScope;
    /// The type representing the [`user.data.12`](https://www.zaber.com/protocol-manual#topic_setting_user_data_12) setting.
    pub struct UserData12: Setting<Type = i64, Name = "user.data.12">, DeviceScope;
    /// The type representing the [`user.data.13`](https://www.zaber.com/protocol-manual#topic_setting_user_data_13) setting.
    pub struct UserData13: Setting<Type = i64, Name = "user.data.13">, DeviceScope;
    /// The type representing the [`user.data.14`](https://www.zaber.com/protocol-manual#topic_setting_user_data_14) setting.
    pub struct UserData14: Setting<Type = i64, Name = "user.data.14">, DeviceScope;
    /// The type representing the [`user.data.15`](https://www.zaber.com/protocol-manual#topic_setting_user_data_15) setting.
    pub struct UserData15: Setting<Type = i64, Name = "user.data.15">, DeviceScope;
    /// The type representing the [`user.data.2`](https://www.zaber.com/protocol-manual#topic_setting_user_data_2) setting.
    pub struct UserData2: Setting<Type = i64, Name = "user.data.2">, DeviceScope;
    /// The type representing the [`user.data.3`](https://www.zaber.com/protocol-manual#topic_setting_user_data_3) setting.
    pub struct UserData3: Setting<Type = i64, Name = "user.data.3">, DeviceScope;
    /// The type representing the [`user.data.4`](https://www.zaber.com/protocol-manual#topic_setting_user_data_4) setting.
    pub struct UserData4: Setting<Type = i64, Name = "user.data.4">, DeviceScope;
    /// The type representing the [`user.data.5`](https://www.zaber.com/protocol-manual#topic_setting_user_data_5) setting.
    pub struct UserData5: Setting<Type = i64, Name = "user.data.5">, DeviceScope;
    /// The type representing the [`user.data.6`](https://www.zaber.com/protocol-manual#topic_setting_user_data_6) setting.
    pub struct UserData6: Setting<Type = i64, Name = "user.data.6">, DeviceScope;
    /// The type representing the [`user.data.7`](https://www.zaber.com/protocol-manual#topic_setting_user_data_7) setting.
    pub struct UserData7: Setting<Type = i64, Name = "user.data.7">, DeviceScope;
    /// The type representing the [`user.data.8`](https://www.zaber.com/protocol-manual#topic_setting_user_data_8) setting.
    pub struct UserData8: Setting<Type = i64, Name = "user.data.8">, DeviceScope;
    /// The type representing the [`user.data.9`](https://www.zaber.com/protocol-manual#topic_setting_user_data_9) setting.
    pub struct UserData9: Setting<Type = i64, Name = "user.data.9">, DeviceScope;
    /// The type representing the [`user.vdata.0`](https://www.zaber.com/protocol-manual#topic_setting_user_vdata_0) setting.
    pub struct UserVdata0: Setting<Type = i64, Name = "user.vdata.0">, DeviceScope;
    /// The type representing the [`user.vdata.1`](https://www.zaber.com/protocol-manual#topic_setting_user_vdata_1) setting.
    pub struct UserVdata1: Setting<Type = i64, Name = "user.vdata.1">, DeviceScope;
    /// The type representing the [`user.vdata.2`](https://www.zaber.com/protocol-manual#topic_setting_user_vdata_2) setting.
    pub struct UserVdata2: Setting<Type = i64, Name = "user.vdata.2">, DeviceScope;
    /// The type representing the [`user.vdata.3`](https://www.zaber.com/protocol-manual#topic_setting_user_vdata_3) setting.
    pub struct UserVdata3: Setting<Type = i64, Name = "user.vdata.3">, DeviceScope;
    /// The type representing the [`version`](https://www.zaber.com/protocol-manual#topic_setting_version) setting.
    pub struct Version: Setting<Type = f32, Name = "version">, DeviceScope;
    /// The type representing the [`version.build`](https://www.zaber.com/protocol-manual#topic_setting_version_build) setting.
    pub struct VersionBuild: Setting<Type = u32, Name = "version.build">, DeviceScope;
}
define_any_setting! {
/// Any setting available in firmware version 7.27.
pub enum AnySetting {
    /// The [accel](https://www.zaber.com/protocol-manual#topic_setting_accel) setting.
    Accel,
    /// The [calibration.type](https://www.zaber.com/protocol-manual#topic_setting_calibration_type) setting.
    CalibrationType,
    /// The [cloop.continuous.enable](https://www.zaber.com/protocol-manual#topic_setting_cloop_continuous_enable) setting.
    CloopContinuousEnable,
    /// The [cloop.displace.tolerance](https://www.zaber.com/protocol-manual#topic_setting_cloop_displace_tolerance) setting.
    CloopDisplaceTolerance,
    /// The [cloop.enable](https://www.zaber.com/protocol-manual#topic_setting_cloop_enable) setting.
    CloopEnable,
    /// The [cloop.recovery.enable](https://www.zaber.com/protocol-manual#topic_setting_cloop_recovery_enable) setting.
    CloopRecoveryEnable,
    /// The [cloop.servo.enable](https://www.zaber.com/protocol-manual#topic_setting_cloop_servo_enable) setting.
    CloopServoEnable,
    /// The [cloop.settle.period](https://www.zaber.com/protocol-manual#topic_setting_cloop_settle_period) setting.
    CloopSettlePeriod,
    /// The [cloop.settle.tolerance](https://www.zaber.com/protocol-manual#topic_setting_cloop_settle_tolerance) setting.
    CloopSettleTolerance,
    /// The [cloop.stall.action](https://www.zaber.com/protocol-manual#topic_setting_cloop_stall_action) setting.
    CloopStallAction,
    /// The [cloop.stall.detect.mode](https://www.zaber.com/protocol-manual#topic_setting_cloop_stall_detect_mode) setting.
    CloopStallDetectMode,
    /// The [cloop.stall.tolerance](https://www.zaber.com/protocol-manual#topic_setting_cloop_stall_tolerance) setting.
    CloopStallTolerance,
    /// The [cloop.timeout](https://www.zaber.com/protocol-manual#topic_setting_cloop_timeout) setting.
    CloopTimeout,
    /// The [comm.address](https://www.zaber.com/protocol-manual#topic_setting_comm_address) setting.
    CommAddress,
    /// The [comm.alert](https://www.zaber.com/protocol-manual#topic_setting_comm_alert) setting.
    CommAlert,
    /// The [comm.checksum](https://www.zaber.com/protocol-manual#topic_setting_comm_checksum) setting.
    CommChecksum,
    /// The [comm.command.packets.max](https://www.zaber.com/protocol-manual#topic_setting_comm_command_packets_max) setting.
    CommCommandPacketsMax,
    /// The [comm.en.ipv4.address](https://www.zaber.com/protocol-manual#topic_setting_comm_en_ipv4_address) setting.
    CommEnIpv4Address,
    /// The [comm.en.ipv4.dhcp.enabled](https://www.zaber.com/protocol-manual#topic_setting_comm_en_ipv4_dhcp_enabled) setting.
    CommEnIpv4DhcpEnabled,
    /// The [comm.en.ipv4.gateway](https://www.zaber.com/protocol-manual#topic_setting_comm_en_ipv4_gateway) setting.
    CommEnIpv4Gateway,
    /// The [comm.en.ipv4.netmask](https://www.zaber.com/protocol-manual#topic_setting_comm_en_ipv4_netmask) setting.
    CommEnIpv4Netmask,
    /// The [comm.en.mac](https://www.zaber.com/protocol-manual#topic_setting_comm_en_mac) setting.
    CommEnMac,
    /// The [comm.en.mdns.enable](https://www.zaber.com/protocol-manual#topic_setting_comm_en_mdns_enable) setting.
    CommEnMdnsEnable,
    /// The [comm.next.owner](https://www.zaber.com/protocol-manual#topic_setting_comm_next_owner) setting.
    CommNextOwner,
    /// The [comm.packet.size.max](https://www.zaber.com/protocol-manual#topic_setting_comm_packet_size_max) setting.
    CommPacketSizeMax,
    /// The [comm.protocol](https://www.zaber.com/protocol-manual#topic_setting_comm_protocol) setting.
    CommProtocol,
    /// The [comm.rs232.baud](https://www.zaber.com/protocol-manual#topic_setting_comm_rs232_baud) setting.
    CommRs232Baud,
    /// The [comm.word.size.max](https://www.zaber.com/protocol-manual#topic_setting_comm_word_size_max) setting.
    CommWordSizeMax,
    /// The [device.hw.modified](https://www.zaber.com/protocol-manual#topic_setting_device_hw_modified) setting.
    DeviceHwModified,
    /// The [device.id](https://www.zaber.com/protocol-manual#topic_setting_device_id) setting.
    DeviceId,
    /// The [driver.current.hold](https://www.zaber.com/protocol-manual#topic_setting_driver_current_hold) setting.
    DriverCurrentHold,
    /// The [driver.current.max](https://www.zaber.com/protocol-manual#topic_setting_driver_current_max) setting.
    DriverCurrentMax,
    /// The [driver.current.run](https://www.zaber.com/protocol-manual#topic_setting_driver_current_run) setting.
    DriverCurrentRun,
    /// The [driver.current.servo](https://www.zaber.com/protocol-manual#topic_setting_driver_current_servo) setting.
    DriverCurrentServo,
    /// The [driver.dir](https://www.zaber.com/protocol-manual#topic_setting_driver_dir) setting.
    DriverDir,
    /// The [driver.enabled](https://www.zaber.com/protocol-manual#topic_setting_driver_enabled) setting.
    DriverEnabled,
    /// The [driver.temperature](https://www.zaber.com/protocol-manual#topic_setting_driver_temperature) setting.
    DriverTemperature,
    /// The [encoder.1.count](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_count) setting.
    Encoder1Count,
    /// The [encoder.1.count.cal](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_count_cal) setting.
    Encoder1CountCal,
    /// The [encoder.1.dir](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_dir) setting.
    Encoder1Dir,
    /// The [encoder.1.fault.type](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_fault_type) setting.
    Encoder1FaultType,
    /// The [encoder.1.filter](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_filter) setting.
    Encoder1Filter,
    /// The [encoder.1.index.mode](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_index_mode) setting.
    Encoder1IndexMode,
    /// The [encoder.1.mode](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_mode) setting.
    Encoder1Mode,
    /// The [encoder.1.pos](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_pos) setting.
    Encoder1Pos,
    /// The [encoder.1.pos.error](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_pos_error) setting.
    Encoder1PosError,
    /// The [encoder.1.ratio.div](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_ratio_div) setting.
    Encoder1RatioDiv,
    /// The [encoder.1.ratio.mult](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_ratio_mult) setting.
    Encoder1RatioMult,
    /// The [encoder.1.ref.phase](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_ref_phase) setting.
    Encoder1RefPhase,
    /// The [encoder.1.type](https://www.zaber.com/protocol-manual#topic_setting_encoder_1_type) setting.
    Encoder1Type,
    /// The [encoder.2.cos](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_cos) setting.
    Encoder2Cos,
    /// The [encoder.2.cos.dc](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_cos_dc) setting.
    Encoder2CosDc,
    /// The [encoder.2.cos.dc.tune](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_cos_dc_tune) setting.
    Encoder2CosDcTune,
    /// The [encoder.2.cos.gain](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_cos_gain) setting.
    Encoder2CosGain,
    /// The [encoder.2.cos.gain.tune](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_cos_gain_tune) setting.
    Encoder2CosGainTune,
    /// The [encoder.2.count](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_count) setting.
    Encoder2Count,
    /// The [encoder.2.count.cal](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_count_cal) setting.
    Encoder2CountCal,
    /// The [encoder.2.dir](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_dir) setting.
    Encoder2Dir,
    /// The [encoder.2.fault.type](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_fault_type) setting.
    Encoder2FaultType,
    /// The [encoder.2.filter](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_filter) setting.
    Encoder2Filter,
    /// The [encoder.2.index.mode](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_index_mode) setting.
    Encoder2IndexMode,
    /// The [encoder.2.interpolation](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_interpolation) setting.
    Encoder2Interpolation,
    /// The [encoder.2.mode](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_mode) setting.
    Encoder2Mode,
    /// The [encoder.2.out.enable](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_out_enable) setting.
    Encoder2OutEnable,
    /// The [encoder.2.out.interpolation](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_out_interpolation) setting.
    Encoder2OutInterpolation,
    /// The [encoder.2.out.width](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_out_width) setting.
    Encoder2OutWidth,
    /// The [encoder.2.pos](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_pos) setting.
    Encoder2Pos,
    /// The [encoder.2.pos.error](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_pos_error) setting.
    Encoder2PosError,
    /// The [encoder.2.ratio.div](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_ratio_div) setting.
    Encoder2RatioDiv,
    /// The [encoder.2.ratio.mult](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_ratio_mult) setting.
    Encoder2RatioMult,
    /// The [encoder.2.signal.min](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_signal_min) setting.
    Encoder2SignalMin,
    /// The [encoder.2.sin](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_sin) setting.
    Encoder2Sin,
    /// The [encoder.2.sin.dc](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_sin_dc) setting.
    Encoder2SinDc,
    /// The [encoder.2.sin.dc.tune](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_sin_dc_tune) setting.
    Encoder2SinDcTune,
    /// The [encoder.2.sin.gain](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_sin_gain) setting.
    Encoder2SinGain,
    /// The [encoder.2.sin.gain.tune](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_sin_gain_tune) setting.
    Encoder2SinGainTune,
    /// The [encoder.2.type](https://www.zaber.com/protocol-manual#topic_setting_encoder_2_type) setting.
    Encoder2Type,
    /// The [encoder.count](https://www.zaber.com/protocol-manual#topic_setting_encoder_count) setting.
    EncoderCount,
    /// The [encoder.count.cal](https://www.zaber.com/protocol-manual#topic_setting_encoder_count_cal) setting.
    EncoderCountCal,
    /// The [encoder.dir](https://www.zaber.com/protocol-manual#topic_setting_encoder_dir) setting.
    EncoderDir,
    /// The [encoder.port.default](https://www.zaber.com/protocol-manual#topic_setting_encoder_port_default) setting.
    EncoderPortDefault,
    /// The [encoder.pos](https://www.zaber.com/protocol-manual#topic_setting_encoder_pos) setting.
    EncoderPos,
    /// The [encoder.pos.error](https://www.zaber.com/protocol-manual#topic_setting_encoder_pos_error) setting.
    EncoderPosError,
    /// The [encoder.ratio.div](https://www.zaber.com/protocol-manual#topic_setting_encoder_ratio_div) setting.
    EncoderRatioDiv,
    /// The [encoder.ratio.mult](https://www.zaber.com/protocol-manual#topic_setting_encoder_ratio_mult) setting.
    EncoderRatioMult,
    /// The [filter.holderid](https://www.zaber.com/protocol-manual#topic_setting_filter_holderid) setting.
    FilterHolderid,
    /// The [force.max](https://www.zaber.com/protocol-manual#topic_setting_force_max) setting.
    ForceMax,
    /// The [ictrl.advance.a](https://www.zaber.com/protocol-manual#topic_setting_ictrl_advance_a) setting.
    IctrlAdvanceA,
    /// The [ictrl.advance.offset](https://www.zaber.com/protocol-manual#topic_setting_ictrl_advance_offset) setting.
    IctrlAdvanceOffset,
    /// The [ictrl.afcff.inductance](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_inductance) setting.
    IctrlAfcffInductance,
    /// The [ictrl.afcff.ke](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_ke) setting.
    IctrlAfcffKe,
    /// The [ictrl.afcff.ki](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_ki) setting.
    IctrlAfcffKi,
    /// The [ictrl.afcff.max](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_max) setting.
    IctrlAfcffMax,
    /// The [ictrl.afcff.ss](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_ss) setting.
    IctrlAfcffSs,
    /// The [ictrl.afcff.ss.max](https://www.zaber.com/protocol-manual#topic_setting_ictrl_afcff_ss_max) setting.
    IctrlAfcffSsMax,
    /// The [ictrl.delay](https://www.zaber.com/protocol-manual#topic_setting_ictrl_delay) setting.
    IctrlDelay,
    /// The [ictrl.ff.kd](https://www.zaber.com/protocol-manual#topic_setting_ictrl_ff_kd) setting.
    IctrlFfKd,
    /// The [ictrl.ff.kp](https://www.zaber.com/protocol-manual#topic_setting_ictrl_ff_kp) setting.
    IctrlFfKp,
    /// The [ictrl.gain.coldmult](https://www.zaber.com/protocol-manual#topic_setting_ictrl_gain_coldmult) setting.
    IctrlGainColdmult,
    /// The [ictrl.period](https://www.zaber.com/protocol-manual#topic_setting_ictrl_period) setting.
    IctrlPeriod,
    /// The [ictrl.pi.ki](https://www.zaber.com/protocol-manual#topic_setting_ictrl_pi_ki) setting.
    IctrlPiKi,
    /// The [ictrl.pi.kp](https://www.zaber.com/protocol-manual#topic_setting_ictrl_pi_kp) setting.
    IctrlPiKp,
    /// The [ictrl.type](https://www.zaber.com/protocol-manual#topic_setting_ictrl_type) setting.
    IctrlType,
    /// The [io.di.port](https://www.zaber.com/protocol-manual#topic_setting_io_di_port) setting.
    IoDiPort,
    /// The [io.do.port](https://www.zaber.com/protocol-manual#topic_setting_io_do_port) setting.
    IoDoPort,
    /// The [knob.dir](https://www.zaber.com/protocol-manual#topic_setting_knob_dir) setting.
    KnobDir,
    /// The [knob.distance](https://www.zaber.com/protocol-manual#topic_setting_knob_distance) setting.
    KnobDistance,
    /// The [knob.enable](https://www.zaber.com/protocol-manual#topic_setting_knob_enable) setting.
    KnobEnable,
    /// The [knob.force](https://www.zaber.com/protocol-manual#topic_setting_knob_force) setting.
    KnobForce,
    /// The [knob.forceprofile](https://www.zaber.com/protocol-manual#topic_setting_knob_forceprofile) setting.
    KnobForceprofile,
    /// The [knob.maxspeed](https://www.zaber.com/protocol-manual#topic_setting_knob_maxspeed) setting.
    KnobMaxspeed,
    /// The [knob.mode](https://www.zaber.com/protocol-manual#topic_setting_knob_mode) setting.
    KnobMode,
    /// The [knob.speedprofile](https://www.zaber.com/protocol-manual#topic_setting_knob_speedprofile) setting.
    KnobSpeedprofile,
    /// The [lamp.current](https://www.zaber.com/protocol-manual#topic_setting_lamp_current) setting.
    LampCurrent,
    /// The [lamp.current.max](https://www.zaber.com/protocol-manual#topic_setting_lamp_current_max) setting.
    LampCurrentMax,
    /// The [lamp.flux](https://www.zaber.com/protocol-manual#topic_setting_lamp_flux) setting.
    LampFlux,
    /// The [lamp.flux.max](https://www.zaber.com/protocol-manual#topic_setting_lamp_flux_max) setting.
    LampFluxMax,
    /// The [lamp.status](https://www.zaber.com/protocol-manual#topic_setting_lamp_status) setting.
    LampStatus,
    /// The [lamp.temperature](https://www.zaber.com/protocol-manual#topic_setting_lamp_temperature) setting.
    LampTemperature,
    /// The [lamp.wavelength.fwhm](https://www.zaber.com/protocol-manual#topic_setting_lamp_wavelength_fwhm) setting.
    LampWavelengthFwhm,
    /// The [lamp.wavelength.peak](https://www.zaber.com/protocol-manual#topic_setting_lamp_wavelength_peak) setting.
    LampWavelengthPeak,
    /// The [limit.approach.maxspeed](https://www.zaber.com/protocol-manual#topic_setting_limit_approach_maxspeed) setting.
    LimitApproachMaxspeed,
    /// The [limit.away.action](https://www.zaber.com/protocol-manual#topic_setting_limit_away_action) setting.
    LimitAwayAction,
    /// The [limit.away.edge](https://www.zaber.com/protocol-manual#topic_setting_limit_away_edge) setting.
    LimitAwayEdge,
    /// The [limit.away.offset](https://www.zaber.com/protocol-manual#topic_setting_limit_away_offset) setting.
    LimitAwayOffset,
    /// The [limit.away.posupdate](https://www.zaber.com/protocol-manual#topic_setting_limit_away_posupdate) setting.
    LimitAwayPosupdate,
    /// The [limit.away.preset](https://www.zaber.com/protocol-manual#topic_setting_limit_away_preset) setting.
    LimitAwayPreset,
    /// The [limit.away.source](https://www.zaber.com/protocol-manual#topic_setting_limit_away_source) setting.
    LimitAwaySource,
    /// The [limit.away.state](https://www.zaber.com/protocol-manual#topic_setting_limit_away_state) setting.
    LimitAwayState,
    /// The [limit.away.triggered](https://www.zaber.com/protocol-manual#topic_setting_limit_away_triggered) setting.
    LimitAwayTriggered,
    /// The [limit.away.tune](https://www.zaber.com/protocol-manual#topic_setting_limit_away_tune) setting.
    LimitAwayTune,
    /// The [limit.away.type](https://www.zaber.com/protocol-manual#topic_setting_limit_away_type) setting.
    LimitAwayType,
    /// The [limit.away.width](https://www.zaber.com/protocol-manual#topic_setting_limit_away_width) setting.
    LimitAwayWidth,
    /// The [limit.c.action](https://www.zaber.com/protocol-manual#topic_setting_limit_c_action) setting.
    LimitCAction,
    /// The [limit.c.edge](https://www.zaber.com/protocol-manual#topic_setting_limit_c_edge) setting.
    LimitCEdge,
    /// The [limit.c.offset](https://www.zaber.com/protocol-manual#topic_setting_limit_c_offset) setting.
    LimitCOffset,
    /// The [limit.c.pos](https://www.zaber.com/protocol-manual#topic_setting_limit_c_pos) setting.
    LimitCPos,
    /// The [limit.c.posupdate](https://www.zaber.com/protocol-manual#topic_setting_limit_c_posupdate) setting.
    LimitCPosupdate,
    /// The [limit.c.preset](https://www.zaber.com/protocol-manual#topic_setting_limit_c_preset) setting.
    LimitCPreset,
    /// The [limit.c.source](https://www.zaber.com/protocol-manual#topic_setting_limit_c_source) setting.
    LimitCSource,
    /// The [limit.c.state](https://www.zaber.com/protocol-manual#topic_setting_limit_c_state) setting.
    LimitCState,
    /// The [limit.c.triggered](https://www.zaber.com/protocol-manual#topic_setting_limit_c_triggered) setting.
    LimitCTriggered,
    /// The [limit.c.tune](https://www.zaber.com/protocol-manual#topic_setting_limit_c_tune) setting.
    LimitCTune,
    /// The [limit.c.type](https://www.zaber.com/protocol-manual#topic_setting_limit_c_type) setting.
    LimitCType,
    /// The [limit.c.width](https://www.zaber.com/protocol-manual#topic_setting_limit_c_width) setting.
    LimitCWidth,
    /// The [limit.cycle.dist](https://www.zaber.com/protocol-manual#topic_setting_limit_cycle_dist) setting.
    LimitCycleDist,
    /// The [limit.detect.decelonly](https://www.zaber.com/protocol-manual#topic_setting_limit_detect_decelonly) setting.
    LimitDetectDecelonly,
    /// The [limit.detect.maxspeed](https://www.zaber.com/protocol-manual#topic_setting_limit_detect_maxspeed) setting.
    LimitDetectMaxspeed,
    /// The [limit.home.action](https://www.zaber.com/protocol-manual#topic_setting_limit_home_action) setting.
    LimitHomeAction,
    /// The [limit.home.bidirectional](https://www.zaber.com/protocol-manual#topic_setting_limit_home_bidirectional) setting.
    LimitHomeBidirectional,
    /// The [limit.home.edge](https://www.zaber.com/protocol-manual#topic_setting_limit_home_edge) setting.
    LimitHomeEdge,
    /// The [limit.home.offset](https://www.zaber.com/protocol-manual#topic_setting_limit_home_offset) setting.
    LimitHomeOffset,
    /// The [limit.home.posupdate](https://www.zaber.com/protocol-manual#topic_setting_limit_home_posupdate) setting.
    LimitHomePosupdate,
    /// The [limit.home.preset](https://www.zaber.com/protocol-manual#topic_setting_limit_home_preset) setting.
    LimitHomePreset,
    /// The [limit.home.source](https://www.zaber.com/protocol-manual#topic_setting_limit_home_source) setting.
    LimitHomeSource,
    /// The [limit.home.state](https://www.zaber.com/protocol-manual#topic_setting_limit_home_state) setting.
    LimitHomeState,
    /// The [limit.home.triggered](https://www.zaber.com/protocol-manual#topic_setting_limit_home_triggered) setting.
    LimitHomeTriggered,
    /// The [limit.home.tune](https://www.zaber.com/protocol-manual#topic_setting_limit_home_tune) setting.
    LimitHomeTune,
    /// The [limit.home.type](https://www.zaber.com/protocol-manual#topic_setting_limit_home_type) setting.
    LimitHomeType,
    /// The [limit.home.width](https://www.zaber.com/protocol-manual#topic_setting_limit_home_width) setting.
    LimitHomeWidth,
    /// The [limit.max](https://www.zaber.com/protocol-manual#topic_setting_limit_max) setting.
    LimitMax,
    /// The [limit.min](https://www.zaber.com/protocol-manual#topic_setting_limit_min) setting.
    LimitMin,
    /// The [limit.range.mode](https://www.zaber.com/protocol-manual#topic_setting_limit_range_mode) setting.
    LimitRangeMode,
    /// The [limit.ref.phase](https://www.zaber.com/protocol-manual#topic_setting_limit_ref_phase) setting.
    LimitRefPhase,
    /// The [limit.ref.phase.measured](https://www.zaber.com/protocol-manual#topic_setting_limit_ref_phase_measured) setting.
    LimitRefPhaseMeasured,
    /// The [limit.start.pos](https://www.zaber.com/protocol-manual#topic_setting_limit_start_pos) setting.
    LimitStartPos,
    /// The [lockstep.numgroups](https://www.zaber.com/protocol-manual#topic_setting_lockstep_numgroups) setting.
    LockstepNumgroups,
    /// The [maxspeed](https://www.zaber.com/protocol-manual#topic_setting_maxspeed) setting.
    Maxspeed,
    /// The [motion.accel.ramptime](https://www.zaber.com/protocol-manual#topic_setting_motion_accel_ramptime) setting.
    MotionAccelRamptime,
    /// The [motion.accelonly](https://www.zaber.com/protocol-manual#topic_setting_motion_accelonly) setting.
    MotionAccelonly,
    /// The [motion.busy](https://www.zaber.com/protocol-manual#topic_setting_motion_busy) setting.
    MotionBusy,
    /// The [motion.decelonly](https://www.zaber.com/protocol-manual#topic_setting_motion_decelonly) setting.
    MotionDecelonly,
    /// The [motion.index.dist](https://www.zaber.com/protocol-manual#topic_setting_motion_index_dist) setting.
    MotionIndexDist,
    /// The [motion.index.num](https://www.zaber.com/protocol-manual#topic_setting_motion_index_num) setting.
    MotionIndexNum,
    /// The [motor.current.max](https://www.zaber.com/protocol-manual#topic_setting_motor_current_max) setting.
    MotorCurrentMax,
    /// The [motor.inductance](https://www.zaber.com/protocol-manual#topic_setting_motor_inductance) setting.
    MotorInductance,
    /// The [motor.ke](https://www.zaber.com/protocol-manual#topic_setting_motor_ke) setting.
    MotorKe,
    /// The [motor.phase](https://www.zaber.com/protocol-manual#topic_setting_motor_phase) setting.
    MotorPhase,
    /// The [motor.phase.ratio.div1](https://www.zaber.com/protocol-manual#topic_setting_motor_phase_ratio_div1) setting.
    MotorPhaseRatioDiv1,
    /// The [motor.phase.ratio.div2](https://www.zaber.com/protocol-manual#topic_setting_motor_phase_ratio_div2) setting.
    MotorPhaseRatioDiv2,
    /// The [motor.phase.ratio.mult](https://www.zaber.com/protocol-manual#topic_setting_motor_phase_ratio_mult) setting.
    MotorPhaseRatioMult,
    /// The [motor.resistance](https://www.zaber.com/protocol-manual#topic_setting_motor_resistance) setting.
    MotorResistance,
    /// The [parking.state](https://www.zaber.com/protocol-manual#topic_setting_parking_state) setting.
    ParkingState,
    /// The [peripheral.hw.modified](https://www.zaber.com/protocol-manual#topic_setting_peripheral_hw_modified) setting.
    PeripheralHwModified,
    /// The [peripheral.id](https://www.zaber.com/protocol-manual#topic_setting_peripheral_id) setting.
    PeripheralId,
    /// The [peripheral.id.pending](https://www.zaber.com/protocol-manual#topic_setting_peripheral_id_pending) setting.
    PeripheralIdPending,
    /// The [peripheral.serial](https://www.zaber.com/protocol-manual#topic_setting_peripheral_serial) setting.
    PeripheralSerial,
    /// The [peripheral.serial.pending](https://www.zaber.com/protocol-manual#topic_setting_peripheral_serial_pending) setting.
    PeripheralSerialPending,
    /// The [pos](https://www.zaber.com/protocol-manual#topic_setting_pos) setting.
    Pos,
    /// The [resolution](https://www.zaber.com/protocol-manual#topic_setting_resolution) setting.
    Resolution,
    /// The [scope.delay](https://www.zaber.com/protocol-manual#topic_setting_scope_delay) setting.
    ScopeDelay,
    /// The [scope.timebase](https://www.zaber.com/protocol-manual#topic_setting_scope_timebase) setting.
    ScopeTimebase,
    /// The [stream.numbufs](https://www.zaber.com/protocol-manual#topic_setting_stream_numbufs) setting.
    StreamNumbufs,
    /// The [stream.numstreams](https://www.zaber.com/protocol-manual#topic_setting_stream_numstreams) setting.
    StreamNumstreams,
    /// The [system.access](https://www.zaber.com/protocol-manual#topic_setting_system_access) setting.
    SystemAccess,
    /// The [system.axiscount](https://www.zaber.com/protocol-manual#topic_setting_system_axiscount) setting.
    SystemAxiscount,
    /// The [system.led.enable](https://www.zaber.com/protocol-manual#topic_setting_system_led_enable) setting.
    SystemLedEnable,
    /// The [system.serial](https://www.zaber.com/protocol-manual#topic_setting_system_serial) setting.
    SystemSerial,
    /// The [system.temperature](https://www.zaber.com/protocol-manual#topic_setting_system_temperature) setting.
    SystemTemperature,
    /// The [system.voltage](https://www.zaber.com/protocol-manual#topic_setting_system_voltage) setting.
    SystemVoltage,
    /// The [trigger.numactions](https://www.zaber.com/protocol-manual#topic_setting_trigger_numactions) setting.
    TriggerNumactions,
    /// The [trigger.numtriggers](https://www.zaber.com/protocol-manual#topic_setting_trigger_numtriggers) setting.
    TriggerNumtriggers,
    /// The [user.data.0](https://www.zaber.com/protocol-manual#topic_setting_user_data_0) setting.
    UserData0,
    /// The [user.data.1](https://www.zaber.com/protocol-manual#topic_setting_user_data_1) setting.
    UserData1,
    /// The [user.data.10](https://www.zaber.com/protocol-manual#topic_setting_user_data_10) setting.
    UserData10,
    /// The [user.data.11](https://www.zaber.com/protocol-manual#topic_setting_user_data_11) setting.
    UserData11,
    /// The [user.data.12](https://www.zaber.com/protocol-manual#topic_setting_user_data_12) setting.
    UserData12,
    /// The [user.data.13](https://www.zaber.com/protocol-manual#topic_setting_user_data_13) setting.
    UserData13,
    /// The [user.data.14](https://www.zaber.com/protocol-manual#topic_setting_user_data_14) setting.
    UserData14,
    /// The [user.data.15](https://www.zaber.com/protocol-manual#topic_setting_user_data_15) setting.
    UserData15,
    /// The [user.data.2](https://www.zaber.com/protocol-manual#topic_setting_user_data_2) setting.
    UserData2,
    /// The [user.data.3](https://www.zaber.com/protocol-manual#topic_setting_user_data_3) setting.
    UserData3,
    /// The [user.data.4](https://www.zaber.com/protocol-manual#topic_setting_user_data_4) setting.
    UserData4,
    /// The [user.data.5](https://www.zaber.com/protocol-manual#topic_setting_user_data_5) setting.
    UserData5,
    /// The [user.data.6](https://www.zaber.com/protocol-manual#topic_setting_user_data_6) setting.
    UserData6,
    /// The [user.data.7](https://www.zaber.com/protocol-manual#topic_setting_user_data_7) setting.
    UserData7,
    /// The [user.data.8](https://www.zaber.com/protocol-manual#topic_setting_user_data_8) setting.
    UserData8,
    /// The [user.data.9](https://www.zaber.com/protocol-manual#topic_setting_user_data_9) setting.
    UserData9,
    /// The [user.vdata.0](https://www.zaber.com/protocol-manual#topic_setting_user_vdata_0) setting.
    UserVdata0,
    /// The [user.vdata.1](https://www.zaber.com/protocol-manual#topic_setting_user_vdata_1) setting.
    UserVdata1,
    /// The [user.vdata.2](https://www.zaber.com/protocol-manual#topic_setting_user_vdata_2) setting.
    UserVdata2,
    /// The [user.vdata.3](https://www.zaber.com/protocol-manual#topic_setting_user_vdata_3) setting.
    UserVdata3,
    /// The [version](https://www.zaber.com/protocol-manual#topic_setting_version) setting.
    Version,
    /// The [version.build](https://www.zaber.com/protocol-manual#topic_setting_version_build) setting.
    VersionBuild,
}
}
